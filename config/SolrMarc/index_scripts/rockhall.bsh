import org.marc4j.*;
import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;
import org.solrmarc.tools.CallNumUtils;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import org.marc4j.marc.Record;

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

// Not used at this time
Set getCollectionFacet(Record record)
{

  Set fields710a   = indexer.getFieldList(record, "710a");
  Set result       = new LinkedHashSet();

  if (fields710a != null) {

    for ( String f710a : fields710a ) {

      String pattern = "Rock and Roll Hall of Fame and Museum";
      Pattern p      = Pattern.compile(pattern);
      Matcher m      = p.matcher(f710a);

      if (m.find()) {
        String[] parts = f710a.split(" \\(");
        result.add(parts[0]);
      }

    }

  }

  return result;


}


// Supresses the collection name from a field or set of fields.  For example, any field containing:
//   Art Collins Papers (Rock and Roll Hall of Fame and Museum)
// would not be included in the result set.  This is specifically for 710$a fields that have this
// type of formatted term.
Set supressRockHall(Record record, String fieldSpec)
{

  result = indexer.getFieldList(record, fieldSpec);
  newResult = new LinkedHashSet();
  for (String s : result)
  {

    String pattern = "Rock and Roll Hall of Fame and Museum. Library and Archives";
    Pattern p      = Pattern.compile(pattern);
    Matcher m      = p.matcher(s);

    if (!m.find())
      newResult.add(Utils.cleanData(s));

  }

  return newResult;

}

// Searches a set of results for the a ".b" at the beginning
// indicating that this is an Innovative record id.  Returns the
// string with the period removed as well as the last character.
// Ex: ".b12345678" is returned as "b1234567"
Set getInnovativeId(Record record, String fieldSpec)
{

  result = indexer.getFieldList(record, fieldSpec);
  newResult = new LinkedHashSet();
  for (String s : result)
  {

    String pattern = "b";
    Pattern p      = Pattern.compile(pattern);
    Matcher m      = p.matcher(s);

    if (m.find()) {
      // Remove first and last chacter from the cleaned result
      String f = Utils.cleanData(s);
      int strLen = f.length();
      int lastIdx = strLen - 1;
      String id = f.substring(1, lastIdx);
      newResult.add(id);
    }

  }

  return newResult;

}

/*
 Determines the id of a marc record from the following fields, in order.  First successful
 match is returned.

   1. First 001 that does not begin with "sky"
   2. First 907a
   3. First 035a
   4. No id found, so null is returned
*/
public String getRockhallId(Record record) {

  Set fields001  = indexer.getFieldList(record, "001");
  String alt1    = indexer.getFirstFieldVal(record, "907a");
  String alt2    = indexer.getFirstFieldVal(record, "035a");
  String f001    = null;

  // Find first 001 that doesn't begin with "sky"
  if (fields001 != null) {
    for ( String s : fields001 ) {
      if ( !s.startsWith("sky")) {
        f001 = s;
        break;
      }
    }
  }

  if ( f001 != null) {
    return f001;
  }
  else {

    if (alt1 != null) {
      int strLen = alt1.length();
      int lastIdx = strLen - 1;
      return alt1.substring(1, lastIdx);
    }
    else if (alt2 != null) {
      int strLen = alt2.length();
      int lastIdx = strLen - 1;
      return alt2.substring(1, lastIdx);
    }
    else {
      return null;
    }
  }

}


Set getRockhallSubjects(Record record) {

  String dashedFields   = "610[a-z]:650[a-z]:651[a-z]:630[a-z]";
  String combinedFields = "600[a-d]:611[a-d]";
  String sep            = "--";

  Set dashedSet   = indexer.getAllSubfields(record, dashedFields, sep);
  Set combinedSet = indexer.getFieldList(record, combinedFields);

  Set result       = new LinkedHashSet();

  if (combinedSet != null) {
    for ( String comb : combinedSet ) {
      result.add(comb);
    }
  }

  if (dashedSet != null) {
    for ( String dashed : dashedSet ) {
      result.add(dashed);
    }
  }

  return result;

}

