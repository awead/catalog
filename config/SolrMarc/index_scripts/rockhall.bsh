import org.marc4j.*;
import org.marc4j.marc.*;
import org.solrmarc.tools.Utils;
import org.solrmarc.tools.CallNumUtils;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import org.marc4j.marc.Record;
import org.solrmarc.index;

// define the base level indexer so that its methods can be called from the script.
// note that the SolrIndexer code will set this value before the script methods are called.
org.solrmarc.index.SolrIndexer indexer = null;

// Not used at this time
Set getCollectionFacet(Record record)
{

  Set fields710a   = indexer.getFieldList(record, "710a");
  Set result       = new LinkedHashSet();

  if (fields710a != null) {

    for ( String f710a : fields710a ) {

      String pattern = "Rock and Roll Hall of Fame and Museum";
      Pattern p      = Pattern.compile(pattern);
      Matcher m      = p.matcher(f710a);

      if (m.find()) {
        String[] parts = f710a.split(" \\(");
        result.add(parts[0]);
      }

    }

  }

  return result;


}


// Supresses the collection name from a field or set of fields.  For example, any field containing:
//   Art Collins Papers (Rock and Roll Hall of Fame and Museum)
// would not be included in the result set.  This is specifically for 710$a fields that have this
// type of formatted term.
Set supressRockHall(Record record, String fieldSpec)
{

  result = indexer.getFieldList(record, fieldSpec);
  newResult = new LinkedHashSet();
  for (String s : result)
  {

    String pattern = "Rock and Roll Hall of Fame and Museum. Library and Archives";
    Pattern p      = Pattern.compile(pattern);
    Matcher m      = p.matcher(s);

    if (!m.find())
      newResult.add(Utils.cleanData(s));

  }

  return newResult;

}

// Searches a set of results for the a ".b" at the beginning
// indicating that this is an Innovative record id.  Returns the
// string with the period removed as well as the last character.
// Ex: ".b12345678" is returned as "b1234567"
Set getInnovativeId(Record record, String fieldSpec)
{

  result = indexer.getFieldList(record, fieldSpec);
  newResult = new LinkedHashSet();
  for (String s : result)
  {

    String pattern = "b";
    Pattern p      = Pattern.compile(pattern);
    Matcher m      = p.matcher(s);

    if (m.find()) {
      // Remove first and last chacter from the cleaned result
      String f = Utils.cleanData(s);
      int strLen = f.length();
      int lastIdx = strLen - 1;
      String id = f.substring(1, lastIdx);
      newResult.add(id);
    }

  }

  return newResult;

}

/*
 Determines the id of a marc record from the following fields, in order.  First successful
 match is returned.

   1. First 001 that does not begin with "sky"
   2. First 907a
   3. First 035a
   4. No id found, so null is returned
*/
public String getRockhallId(Record record) {

  Set fields001  = indexer.getFieldList(record, "001");
  String alt1    = indexer.getFirstFieldVal(record, "907a");
  String alt2    = indexer.getFirstFieldVal(record, "035a");
  String f001    = null;

  // Find first 001 that doesn't begin with "sky"
  if (fields001 != null) {
    for ( String s : fields001 ) {
      if ( !s.startsWith("sky")) {
        f001 = s;
        break;
      }
    }
  }

  if ( f001 != null) {
    return f001;
  }
  else {

    if (alt1 != null) {
      int strLen = alt1.length();
      int lastIdx = strLen - 1;
      return alt1.substring(1, lastIdx);
    }
    else if (alt2 != null) {
      int strLen = alt2.length();
      int lastIdx = strLen - 1;
      return alt2.substring(1, lastIdx);
    }
    else {
      return null;
    }
  }

}


/*
  Builds our subject terms

  Each subfield is indexed as a separate term, except for names which are concatenated
  together into one string.
*/
Set getRockhallSubjects(Record record) {

  Set result = new LinkedHashSet();

  // If anyone can show me how to just simply get a set of subfields from a particular field
  // or set of fields, please show me.  Otherwise, I have to resort to this ridiculous method
  // that uses the getAllSubfields with a separator, then splits each resulting string with
  // that same separator.

  // First get subjects that do not have names in them
  Set nonNameFields = indexer.getAllSubfields(record, "610[a-z]:650[a-z]:651[a-z]:630[a-z]", "--");
  for ( String concatSubs : nonNameFields ) {
    String[] subs = concatSubs.split("--");
    for (String s : subs) {
      result.add(s);
    }
  }

  // For subjects with names and dates, get the non-name and date parts
  Set nameFieldsNoNames = indexer.getAllSubfields(record, "600[e-z]:611[e-z]", "--");
  for ( String concatSubs : nameFieldsNoNames ) {
    String[] subs = concatSubs.split("--");
    for (String s : subs) {
      result.add(s);
    }
  }

  // Gather up the names just the names from 600 and 611 fields
  Set nameFields = indexer.getFieldList(record, "600[a-d]:611[a-d]");
  if (nameFields != null) {
    for ( String comb : nameFields ) {
      result.add(comb);
    }
  }
  
  return result;

}


/*
  Finds our call numbers from 945 fields.

  $a and $b is concatenated together and added to the result set
  but only if $l corresponds to one of our location codes.  Otherwise,
  the field is ignored.
*/
Set getRockhallCallNumber(Record record) {

  Set result = new LinkedHashSet();
  String l;
  String a;
  String b;
  String call;

  List fields945 = record.getVariableFields("945");

  for ( DataField field : fields945) {
    Subfield subfield_l  = field.getSubfield('l');
    List     subfields_a = field.getSubfields('a');
    Subfield subfield_b  = field.getSubfield('b');

    if ( subfield_l != null && subfields_a != null ) {
      l = subfield_l.getData();

      String pattern = "rx|rhlrr|rharr|rhs2|rhs2o|rhs3";
      Pattern p      = Pattern.compile(pattern);
      Matcher m      = p.matcher(l);
      
      if (m.find()) {
        for ( Subfield subfield_a : subfields_a ) {
          String part_a = subfield_a.getData();
          if ( a == null ) {
            a = part_a;
          }
          else {
            a = a + " " + part_a;  
          }
        }

        if (subfield_b != null) {
          b = subfield_b.getData();
          call = a + " " + b;
        }
        else {
          call = a;
        }

        result.add(call);
      }

    }   

  }

  return result;

}

